[{"path":"https://c-rutter.github.io/crcrdm/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://c-rutter.github.io/crcrdm/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.","code":""},{"path":"https://c-rutter.github.io/crcrdm/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"GNU General Public License","text":"0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.","code":""},{"path":"https://c-rutter.github.io/crcrdm/LICENSE.html","id":"no-warranty","dir":"","previous_headings":"","what":"NO WARRANTY","title":"GNU General Public License","text":"11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS","code":""},{"path":"https://c-rutter.github.io/crcrdm/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"},{"path":"https://c-rutter.github.io/crcrdm/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Pedro Nascimento de Lima. Maintainer.","code":""},{"path":"https://c-rutter.github.io/crcrdm/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"de Lima PN (2022). crcrdm: Robust Decision Making tools cancer screening models. R package version 1.0.2.","code":"@Manual{,   title = {crcrdm: Robust Decision Making tools for cancer screening models},   author = {Pedro Nascimento {de Lima}},   year = {2022},   note = {R package version 1.0.2}, }"},{"path":"https://c-rutter.github.io/crcrdm/index.html","id":"crcrdm--rdm-tools-for-cancer-screening-models","dir":"","previous_headings":"","what":"Robust Decision Making tools for cancer screening models","title":"Robust Decision Making tools for cancer screening models","text":"Robust Decision Making set methods tools help modelers inform policy conditions deep uncertainty. Characterizing robustness policy recommendations uncertain assumptions crucial concern modelers. computational cost uncertainty analyses can high, High-Performance Computing (HPC) increasingly ubiquitous accessible. Nevertheless, using HPC tools involves steep learning curve, may hinder adoption. repository houses crcrdm – R package designed facilitate analysis Cancer Screening Models using HPC resources. crcrdm provides interface model parallel back-end - HPC workflow system orchestrates concurrent model runs. Currently, use package EMEWS. package aims make easier define efficiently run large experimental designs, reducing need create ad-hoc analytical code analysis. package includes features useful ongoing analyses performed CRC-SPIN model. First, partitions memory usage models manageable size (e.g., model run parallelized across different computing processes nodes). package also supports multi-model experimental designs. package may also help facilitate modeling transparency separating analytical workflow model. package implements crcmodel crcexperiment R6 classes can used perform Robust Decision Making Analyses multiple cancer screening models using High-Performance Computing resources. package supports large-scale computational tasks historically deemed unfeasible microsimulation models, defining conducting Probabilistic Sensitivity Analyses (PSAs) robustness analyses large models large combinations parameter sets.","code":""},{"path":"https://c-rutter.github.io/crcrdm/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Robust Decision Making tools for cancer screening models","text":"package can installed GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"c-rutter/crcrdm\")"},{"path":"https://c-rutter.github.io/crcrdm/index.html","id":"status","dir":"","previous_headings":"","what":"Status","title":"Robust Decision Making tools for cancer screening models","text":"package actively used crcspin model, contained package. user pool package small plans releasing CRAN time. Future iterations work might make package general. like use package interested collaborating us, get touch.","code":""},{"path":"https://c-rutter.github.io/crcrdm/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Robust Decision Making tools for cancer screening models","text":"documentation page available link. documentation page describes package main classes methods.","code":""},{"path":"https://c-rutter.github.io/crcrdm/index.html","id":"key-classes-crcmodel-and-crcexperiment","dir":"","previous_headings":"","what":"Key classes: crcmodel, and crcexperiment:","title":"Robust Decision Making tools for cancer screening models","text":"package implements two R6 classes: crcmodel : basic unit encompasses single model structure. crcmodel can either calibrated . calibrated, model object can include posterior distribution parameters. single model may contain multiple posterior distributions parameter sets created different calibration runs, potentially different targets priors. crcexperiment : Contains definition experiment experiment applied crcmodels included .","code":""},{"path":"https://c-rutter.github.io/crcrdm/index.html","id":"automated-tests-and-test-coverage","dir":"","previous_headings":"","what":"Automated Tests and Test Coverage","title":"Robust Decision Making tools for cancer screening models","text":"package tested automatically every commit across platforms. Results automated checks can found . test coverage report can found .","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcexperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class Representing a `crcexperiment` — crcexperiment","title":"R6 Class Representing a `crcexperiment` — crcexperiment","text":"class implements `crcexperiment`.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcexperiment.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 Class Representing a `crcexperiment` — crcexperiment","text":"models list containing crcmodel objects. nh_design data.frame containing one row per natural history experiment run. screening_design data.frame containing one row per screening experiment run. grid data.frame containing one row per point grid experimental design. lhs table containing one row per point Latin Hypercube experimental design. blocks number population blocks used experimental design. number population blocks allows us divide experimental design experimental blocks. posteriors data.frame containing one row per parameter set defined posterior model included experiment. experimental_parameters list containing details experimental parameter. Experimental parameters can either policy levers uncertainties. Defining distinction user.","code":""},{"path":[]},{"path":"https://c-rutter.github.io/crcrdm/reference/crcexperiment.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class Representing a `crcexperiment` — crcexperiment","text":"crcexperiment$new() crcexperiment$set_parameter() crcexperiment$set_design() crcexperiment$write_design() crcexperiment$clone()","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcexperiment.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class Representing a `crcexperiment` — crcexperiment","text":"function used initialize `crcexperiment` object. object represents experiment run can encompass multiple models.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcexperiment.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a `crcexperiment` — crcexperiment","text":"","code":"crcexperiment$new(...)"},{"path":"https://c-rutter.github.io/crcrdm/reference/crcexperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a `crcexperiment` — crcexperiment","text":"... set crcmodels included experiment. One `crcexperiment` can contain multiple models `crcmodel` class.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcexperiment.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a `crcexperiment` — crcexperiment","text":"new `crcexperiment` object.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcexperiment.html","id":"method-set-parameter-","dir":"Reference","previous_headings":"","what":"Method set_parameter()","title":"R6 Class Representing a `crcexperiment` — crcexperiment","text":"Set Experimental Parameter Experiment","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcexperiment.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a `crcexperiment` — crcexperiment","text":"","code":"crcexperiment$set_parameter(   parameter_name,   experimental_design,   values,   min,   max )"},{"path":"https://c-rutter.github.io/crcrdm/reference/crcexperiment.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a `crcexperiment` — crcexperiment","text":"parameter_name character string defining parameter name. experimental_design Either \"grid\" \"lhs\" Use lhs want create Latin Hypercube Sample within min max bounds provided. Use Grid values use experimental_design = \"grid\". vector including values included grid experimental design. Please use parameters values can converted strings without issues. min use experimental_design = \"lhs\". bea numeric value indicating minimum bound Latin Hypercube sample. max use experimental_design = \"lhs\". bea numeric value indicating minimum bound Latin Hypercube sample.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcexperiment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class Representing a `crcexperiment` — crcexperiment","text":"function constructs experimental_parameter object, appends experimental parameters visible inside model future. Experimental parameters can either uncertainties decision levers. Every parameter defined function can accessed within model using experimental_parameters$param_name.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcexperiment.html","id":"method-set-design-","dir":"Reference","previous_headings":"","what":"Method set_design()","title":"R6 Class Representing a `crcexperiment` — crcexperiment","text":"Set Experimental Design","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcexperiment.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a `crcexperiment` — crcexperiment","text":"","code":"crcexperiment$set_design(   n_lhs,   blocks = 1,   grid_design_df,   convert_lhs_to_grid = F,   lhs_to_grid_midpoints = 0 )"},{"path":"https://c-rutter.github.io/crcrdm/reference/crcexperiment.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a `crcexperiment` — crcexperiment","text":"n_lhs number points Latin Hypercube Sample created. blocks number population blocks use parallelize runs across nodes. grid_design_df data.frame containing pre-existing experimental design used. function use experimental design lieu parameters defined grid, effectively replaces set parameters part grid design. convert_lhs_to_grid Default FALSE. TRUE, function convert LHS parameters \"grid\" parameters. useful one needs test \"corners\" experimental design performing full LHS run. lhs_to_grid_midpoints relevant convert_to_lhs = T. Default value 0. integer determining many points within grid hypercube created parameters converted LHS GRID design. example, convert_lhs_to_grid = T lhs_to_grid_midpoints = 0, function create full factorial design LHS parameters 2^n points. one wants use one midpoint, design 3^n points, . parameter affect parameters orignally defined part grid design values already set.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcexperiment.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class Representing a `crcexperiment` — crcexperiment","text":"Creates two data.frames represent experimental design\" `nh_design` natural history experiments `screening_design` screening experiments. experimental designs created based parameters defined set_parameter functions. experimental design created function useful run typical RDM analysis policy evaluated across LHS deep uncertainties. achieve , define policy lever grid parameter, uncertainty \"lhs\" uncertainty. Natural history uncertainties often already defined model's posterior file also considered. natural history design `n_posterior` runs model experimental design. screening experimental design `blocks` \\* `n_lhs` \\* `n_grid_points` \\* `n_posterior` model experimental design.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcexperiment.html","id":"method-write-design-","dir":"Reference","previous_headings":"","what":"Method write_design()","title":"R6 Class Representing a `crcexperiment` — crcexperiment","text":"Write Experimental design disk","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcexperiment.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a `crcexperiment` — crcexperiment","text":"","code":"crcexperiment$write_design(   path,   design = c(\"both\", \"natural_history\", \"screening\"),   write_inputs = T,   block_ids,   format = c(\"json\", \"csv\") )"},{"path":"https://c-rutter.github.io/crcrdm/reference/crcexperiment.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a `crcexperiment` — crcexperiment","text":"path folder json experimental designs saved. specify file name. missing, function return design specified . design \"natural_history\", \"screening\" \"\". missing, \"\" assumed. write_inputs TRUE (default), writes model inputs json. Might unnecessary inputs set model run script. block_ids integer vector block ids write json. can used run specific blocks screening experimental design. format \"json\" \"csv\". natural history design must written json, whereas screening design can written json csv.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcexperiment.html","id":"details-2","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class Representing a `crcexperiment` — crcexperiment","text":"Creates data.frame row represents single experiment. json object included row contains information models need re-create server-side HPC workflow.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcexperiment.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class Representing a `crcexperiment` — crcexperiment","text":"objects class cloneable method.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcexperiment.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a `crcexperiment` — crcexperiment","text":"","code":"crcexperiment$clone(deep = FALSE)"},{"path":"https://c-rutter.github.io/crcrdm/reference/crcexperiment.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a `crcexperiment` — crcexperiment","text":"deep Whether make deep clone.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 Class Representing a `crcmodel` — crcmodel","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"class implements `crcmodel`.","code":""},{"path":[]},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"name character string representing model name (e.g. CRC-SPIN v 2.1) inputs list model inputs. One can add inputs object set_input function. inputs_table data.frame listing inputs added model. posterior_params data.frame containing parameters posterior distribution model. table set set_posterior function. natural_history_results object receive results natural history function. screening_results object receive results natural history function. simulate_natural_history_fn function take parameters self ..., simulate natural history crc returns invisible(self). simulate_screening_fn function take parameters self ..., simulate natural history crc returns invisible(self).","code":""},{"path":[]},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"crcmodel$new() crcmodel$set_input() crcmodel$to_json() crcmodel$set_inputs_from_json() crcmodel$set_posterior() crcmodel$set_natural_history_fn() crcmodel$set_screening_fn() crcmodel$simulate_natural_history() crcmodel$simulate_screening() crcmodel$clone()","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"Create new `crcmodel` object.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"","code":"crcmodel$new(name)"},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"name name model created.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"s new `crcmodel` object.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"method-set-input-","dir":"Reference","previous_headings":"","what":"Method set_input()","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"Set Input","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"","code":"crcmodel$set_input(name, value, type)"},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"name character string defining input name value input value. Can single value, list vector. type Functionality TBD, inputs can filtered type.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"Use function add new input crcmodel object. model inputs shoulhd added modified function. Inputs can vectors lists strings, numeric integers, guarantee can translated JSON without issues.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"method-to-json-","dir":"Reference","previous_headings":"","what":"Method to_json()","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"Converts `crcmodel` JSON string","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"","code":"crcmodel$to_json(input_types)"},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"input_types vector input types include json object.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"JSON string containing crcmodel objects exported","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"method-set-inputs-from-json-","dir":"Reference","previous_headings":"","what":"Method set_inputs_from_json()","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"Set model Inputs JSON string","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"","code":"crcmodel$set_inputs_from_json(json)"},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"json JSON string generated model_to_json function","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"Use function set model inputs JSON string. Note posterior distribution included json strong model inputs.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"method-set-posterior-","dir":"Reference","previous_headings":"","what":"Method set_posterior()","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"Set Posterior distribution model parameters","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"","code":"crcmodel$set_posterior(   posteriors_list,   posterior_weights,   cols_to_ignore = NULL,   n_posterior = 1000,   use_average = F,   seed = 12345678,   resample = T )"},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"posteriors_list named list one data.frames containing posterior model parameters. posterior_weights character indicating name column contain weights used sampling posterior cols_to_ignore character vector columns name ignore. useful posterior files contain columns parameters inputs model. n_posterior size sample take posterior file. use_average T one wants use average value parameters rather mean seed random seed use sampling posterior resample T, samples posterior using posterior weights. Otherwise, returns full posterior, preservers weights.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"details-2","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"Use function add new input crcmodel object. model inputs shoulhd added modified function. Inputs can vectors lists strings, numeric integers, guarantee can translated JSON without issues.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"method-set-natural-history-fn-","dir":"Reference","previous_headings":"","what":"Method set_natural_history_fn()","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"Set Natural History Function","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"","code":"crcmodel$set_natural_history_fn(   natural_history_fn,   returns_standardized_df = T )"},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"natural_history_fn R function capable simulating model's natural history. returns_standardized_df TRUE, natural history function must return standardized dataframe.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"details-3","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"function allows user custom natural history function. flexibility effectively decouples model package used simulate model. regression, functional form model baked `lm`. Instead, `lm` allows create ** linear model. Use function define natural history function. advised create simple natural history function put `browser()` inside . , creating model `my_model <- crcmodel$new()` adding inputs `my_model$set_input()`, assign custom natural history function `my_model$set_natural_history(my_function_name)`. `my_function_name` name function already sourced script package. Finally, run `my_model$simulate_natural_history()` run natural history model. see inputs inside `self` object, environment contains inputs model.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"method-set-screening-fn-","dir":"Reference","previous_headings":"","what":"Method set_screening_fn()","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"Set Screening Function","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"","code":"crcmodel$set_screening_fn(screening_fn, returns_standardized_df = T)"},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"screening_fn R function capable simulating model's screening. returns_standardized_df TRUE, natural history function must return standardized dataframe.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"details-4","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"function allows user custom screening function.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"method-simulate-natural-history-","dir":"Reference","previous_headings":"","what":"Method simulate_natural_history()","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"Simulate Natural History Wrapper Function","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"","code":"crcmodel$simulate_natural_history(...)"},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"... set parameters passed function passed along user natural history function.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"details-5","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"function wrapper around user natural history function. passes `self` object parameters provided function.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"method-simulate-screening-","dir":"Reference","previous_headings":"","what":"Method simulate_screening()","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"Simulate Screening Wrapper Function","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"","code":"crcmodel$simulate_screening(...)"},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"... set parameters passed function passed along user screening function.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"details-6","dir":"Reference","previous_headings":"","what":"Details","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"function wrapper around user screening. passes `self` object parameters provided function.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"objects class cloneable method.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"","code":"crcmodel$clone(deep = FALSE)"},{"path":"https://c-rutter.github.io/crcrdm/reference/crcmodel.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 Class Representing a `crcmodel` — crcmodel","text":"deep Whether make deep clone.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/crcrdm.html","id":null,"dir":"Reference","previous_headings":"","what":"crcrdm: Tools for Robust Decision Making analyses for CRC models — crcrdm","title":"crcrdm: Tools for Robust Decision Making analyses for CRC models — crcrdm","text":"package implements crcmodel crcexperiment R6 classes can used perform large-scale computational experiments multiple cancer screening models using High-Performance Computing resources. package supports common tasks, defining conducting Probabilistic Sensitivity Analyses (PSAs) robustness analyses using one multiple models. package also designed support High-Performance Computing workflows using Extreme Scale Model Exploration Swift/T (EMEWS) framework. feature allow use High-Performance computing resources large-scale, long-running experiments involve simulating large populations (e.g. 10^7) thousands simulation runs, require several thousand computing hours many terabytes memory run. package primarly used CRC-SPIN model far, used models. package contain specific model.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/get_people_in_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Find IDS of persons in a given block — get_people_in_block","title":"Find IDS of persons in a given block — get_people_in_block","text":"Find IDS persons given block","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/get_people_in_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find IDS of persons in a given block — get_people_in_block","text":"","code":"get_people_in_block(person_ids, blocks, block_id)"},{"path":"https://c-rutter.github.io/crcrdm/reference/get_people_in_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find IDS of persons in a given block — get_people_in_block","text":"person_ids vector integers people ids. vector starts 1. blocks number population blocks. block_id id population block query","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/get_people_in_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find IDS of persons in a given block — get_people_in_block","text":"vector people belong block_id","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/is.crcexperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if object is a `crcexperiment`. — is.crcexperiment","title":"Checks if object is a `crcexperiment`. — is.crcexperiment","text":"Checks object `crcexperiment`.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/is.crcexperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if object is a `crcexperiment`. — is.crcexperiment","text":"","code":"is.crcexperiment(x)"},{"path":"https://c-rutter.github.io/crcrdm/reference/is.crcexperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if object is a `crcexperiment`. — is.crcexperiment","text":"x object","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/is.crcexperiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if object is a `crcexperiment`. — is.crcexperiment","text":"TRUE object `crcexperiment`","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/is.crcmodel.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if object is a `crcmodel`. — is.crcmodel","title":"Checks if object is a `crcmodel`. — is.crcmodel","text":"Checks object `crcmodel`.","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/is.crcmodel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if object is a `crcmodel`. — is.crcmodel","text":"","code":"is.crcmodel(x)"},{"path":"https://c-rutter.github.io/crcrdm/reference/is.crcmodel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if object is a `crcmodel`. — is.crcmodel","text":"x model object","code":""},{"path":"https://c-rutter.github.io/crcrdm/reference/is.crcmodel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if object is a `crcmodel`. — is.crcmodel","text":"TRUE object crcmodel","code":""},{"path":"https://c-rutter.github.io/crcrdm/news/index.html","id":"crcrdm-102","dir":"Changelog","previous_headings":"","what":"crcrdm 1.0.2","title":"crcrdm 1.0.2","text":"experiment$write_design() now writes csv json files (#32 fixes #33)","code":""},{"path":"https://c-rutter.github.io/crcrdm/news/index.html","id":"crcrdm-101","dir":"Changelog","previous_headings":"","what":"crcrdm 1.0.1","title":"crcrdm 1.0.1","text":"implements #28, now json file don’t include model inputs @pedroliman https://github.com/c-rutter/crcrdm/pull/29 crcmodel$set_posterior() now supports weighted sample (resample = T), full posterior (resample =F) taking weighted posterior mean parameters (use_average = T) #31 crcexperiment$set_design(nlock_ids = 1:2) now can used filter population blocks experimental deign @pedroliman https://github.com/c-rutter/crcrdm/pull/27 fixing typo @pedroliman https://github.com/c-rutter/crcrdm/pull/30","code":""},{"path":"https://c-rutter.github.io/crcrdm/news/index.html","id":"crcrdm-100","dir":"Changelog","previous_headings":"","what":"crcrdm 1.0.0","title":"crcrdm 1.0.0","text":"First stable version package. Implements crcmodel crcexperiment classes. crcmodel can used represent cancer screening model natural history component screening component. crcexperiment can used create experimental designs multiple models, multiple parameters distributions. crcexperiment also supports population blocks, can used divide simulation runs population sizes HPC side. crcexperiment also supports pre-defined grid experimental designs.","code":""},{"path":"https://c-rutter.github.io/crcrdm/news/index.html","id":"crcrdm-010","dir":"Changelog","previous_headings":"","what":"crcrdm 0.1.0","title":"crcrdm 0.1.0","text":"Added NEWS.md file track changes package.","code":""}]
